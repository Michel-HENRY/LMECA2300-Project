static GLchar text_vert[]={"/*************************************************************************\n"
" * BOV 0.1\n"
" * A wrapper around OpenGL and GLFW (www.glfw.org) to draw simple 2D\n"
" * graphics.\n"
" *------------------------------------------------------------------------\n"
" * Copyright (c) 2019-2020 C\n"
"lestin Marot <marotcelestin@gmail.com>\n"
" *\n"
" * This software is provided 'as-is', without any express or implied\n"
" * warranty. In no event will the authors be held liable for any damages\n"
" * arising from the use of this software.\n"
" *\n"
" * Permission is granted to anyone to use this software for any purpose,\n"
" * including commercial applications, and to alter it and redistribute it\n"
" * freely, subject to the following restrictions:\n"
" *\n"
" * 1. The origin of this software must not be misrepresented; you must not\n"
" *    claim that you wrote the original software. If you use this software\n"
" *    in a product, an acknowledgment in the product documentation would\n"
" *    be appreciated but is not required.\n"
" *\n"
" * 2. Altered source versions must be plainly marked as such, and must not\n"
" *    be misrepresented as being the original software.\n"
" *\n"
" * 3. This notice may not be removed or altered from any source\n"
" *    distribution.\n"
" *\n"
" *************************************************************************/\n"
"\n"
"#version 150 core\n"
"\n"
"layout (std140) uniform objectBlock\n"
"{\n"
"	vec4 fillColor;\n"
"	vec4 outlineColor;\n"
"	vec2 localPos;\n"
"	vec2 outlineShift;\n"
"	float fontSize;\n"
"	float boldness;\n"
"	float outlineWidth;\n"
"	int space_type; // 0: normal sizes, 1: size in pixels, 2: size in pixels without translation\n"
"};\n"
"\n"
"layout (std140) uniform worldBlock\n"
"{\n"
"	vec2 resolution;\n"
"	vec2 translate;\n"
"	float zoom;\n"
"	// float rotation;\n"
"};\n"
"\n"
"// position of this vertex compared to\n"
"// the bottom-left of the left-most letter\n"
"in vec2 pos;\n"
"\n"
"// position of this vertex in the font atlas texture\n"
"in vec2 tex;\n"
"\n"
"// just forward text to the fragment shader\n"
"out vec2 texCoord;\n"
"\n"
"void main()\n"
"{\n"
"	texCoord = tex;\n"
"\n"
"	vec2 resRatio = min(resolution.x, resolution.y) / resolution;\n"
"\n"
"	// note: conditional based on uniform should not slow the shader down\n"
"	vec2 vertexPos = pos * fontSize;\n"
"	if(space_type==0) {\n"
"		// classical case\n"
"		gl_Position = vec4(resRatio * zoom * (localPos + translate + vertexPos),\n"
"		                   0.0, 1.0);\n"
"	}\n"
"	else if(space_type==1) {\n"
"		// no scaling of the vertexPos is applied\n"
"		gl_Position = vec4(resRatio * (zoom * (localPos + translate) + vertexPos),\n"
"		                   0.0, 1.0);\n"
"	}\n"
"	else {\n"
"		// everything is given in pixel, from the bottom left corner :-)\n"
"		vec2 pixelPos = localPos + vertexPos;\n"
"		gl_Position = vec4(2.0*pixelPos / resolution - 1.0,\n"
"		                   0.0, 1.0);\n"
"	}\n"
"}\n"
};
