static GLchar text_frag[]={" /*************************************************************************\n"
"  * BOV 0.1\n"
"  * A wrapper around OpenGL and GLFW (www.glfw.org) to draw simple 2D\n"
"  * graphics.\n"
"  *------------------------------------------------------------------------\n"
"  * Copyright (c) 2019-2020 C\n"
"lestin Marot <marotcelestin@gmail.com>\n"
"  *\n"
"  * This software is provided 'as-is', without any express or implied\n"
"  * warranty. In no event will the authors be held liable for any damages\n"
"  * arising from the use of this software.\n"
"  *\n"
"  * Permission is granted to anyone to use this software for any purpose,\n"
"  * including commercial applications, and to alter it and redistribute it\n"
"  * freely, subject to the following restrictions:\n"
"  *\n"
"  * 1. The origin of this software must not be misrepresented; you must not\n"
"  *    claim that you wrote the original software. If you use this software\n"
"  *    in a product, an acknowledgment in the product documentation would\n"
"  *    be appreciated but is not required.\n"
"  *\n"
"  * 2. Altered source versions must be plainly marked as such, and must not\n"
"  *    be misrepresented as being the original software.\n"
"  *\n"
"  * 3. This notice may not be removed or altered from any source\n"
"  *    distribution.\n"
"  *\n"
"  *************************************************************************/\n"
"\n"
"#version 150 core\n"
"\n"
"layout (std140) uniform objectBlock\n"
"{\n"
"	vec4 fillColor;\n"
"	vec4 outlineColor;\n"
"	vec2 localPos;\n"
"	vec2 outlineShift;\n"
"	float fontSize;\n"
"	float boldness;\n"
"	float outlineWidth;\n"
"	int space_type; // 0: normal sizes, 1: size in pixels, 2: size in pixels without translation\n"
"};\n"
"\n"
"uniform sampler2D fontTex;\n"
"\n"
"in vec2 texCoord;\n"
"out vec4 outColor;\n"
"\n"
"\n"
"void main()\n"
"{\n"
"	// vec2 dpdx = dFdx(texCoord);\n"
"	// vec2 dpdy = dFdy(texCoord);\n"
"	// vec4 texValue = textureGrad(fontTex, texCoord, dpdx, dpdy);\n"
"	vec4 texValue = texture(fontTex, texCoord);\n"
"	float sdf = texValue.r;\n"
"	vec2 normal = texValue.gb - 0.5f;\n"
"\n"
"	// Outline\n"
"	float shift = outlineWidth;\n"
"\n"
"	// we add the components of the outlineShift in the direction of the gradient.\n"
"	if(outlineShift.xy!=vec2(0.0f))\n"
"		shift += dot(outlineShift.xy, normal);\n"
"\n"
"	float glyph_center = 0.5f - 0.25f * boldness;\n"
"	float outline_center = glyph_center + 0.25f * shift;\n"
"\n"
"	float sdfWidth = fwidth(sdf); // length(dxdy);\n"
"\n"
"	// glyph_center = min(glyph_center, outline_center);\n"
"	float opacity = smoothstep(-sdfWidth, sdfWidth, sdf - glyph_center); // ~2 pixels antialising\n"
"	float mu = smoothstep(-sdfWidth, sdfWidth, sdf - outline_center);\n"
"	outColor = mix(outlineColor, fillColor, mu); // at 0: completely outlineColor, at1: completely fillColor\n"
"	outColor.a *= opacity;\n"
"}\n"
};
