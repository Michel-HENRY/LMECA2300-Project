static GLchar curve_geom[]={" /*************************************************************************\n"
"  * BOV 0.1\n"
"  * A wrapper around OpenGL and GLFW (www.glfw.org) to draw simple 2D\n"
"  * graphics.\n"
"  *------------------------------------------------------------------------\n"
"  * Copyright (c) 2019-2020 C\n"
"lestin Marot <marotcelestin@gmail.com>\n"
"  *\n"
"  * This software is provided 'as-is', without any express or implied\n"
"  * warranty. In no event will the authors be held liable for any damages\n"
"  * arising from the use of this software.\n"
"  *\n"
"  * Permission is granted to anyone to use this software for any purpose,\n"
"  * including commercial applications, and to alter it and redistribute it\n"
"  * freely, subject to the following restrictions:\n"
"  *\n"
"  * 1. The origin of this software must not be misrepresented; you must not\n"
"  *    claim that you wrote the original software. If you use this software\n"
"  *    in a product, an acknowledgment in the product documentation would\n"
"  *    be appreciated but is not required.\n"
"  *\n"
"  * 2. Altered source versions must be plainly marked as such, and must not\n"
"  *    be misrepresented as being the original software.\n"
"  *\n"
"  * 3. This notice may not be removed or altered from any source\n"
"  *    distribution.\n"
"  *\n"
"  * testing trigraph \?\?=\n"
"  * testing newline sequence etc \\n \\t \\r \\;  * testing quotes \"  coucou \" \"\n"
"  *************************************************************************/\n"
"\n"
"#version 150 core\n"
"\n"
"layout (std140) uniform objectBlock\n"
"{\n"
"	vec4 fillColor;\n"
"	vec4 outlineColor;\n"
"	vec2 localPos;\n"
"	vec2 localScale;\n"
"	float width;\n"
"	float marker;\n"
"	float outlineWidth;\n"
"	// float rotation;\n"
"	int space_type; // 0: normal sizes, 1: unzoomable, 2: unmodifable pixel size\n"
"};\n"
"\n"
"layout (std140) uniform worldBlock\n"
"{\n"
"	vec2 resolution;\n"
"	vec2 translate;\n"
"	float zoom;\n"
"	// float rotation;\n"
"};\n"
"\n"
"layout(lines_adjacency) in;\n"
"layout(triangle_strip, max_vertices = 4) out;\n"
"\n"
"out vec2 pRect;\n"
"flat out float pixelSize;\n"
"flat out float lba;\n"
"\n"
"vec2 perpendicular(vec2 v) {\n"
"	return vec2(-v.y, v.x);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"	float minRes = min(resolution.x, resolution.y);\n"
"	vec2 resRatio = minRes / resolution;\n"
"\n"
"	// screenPos = scaling*worldPos + translation\n"
"\n"
"	// localScale should not affect the width and outlineWidth\n"
"	// therefore widthScaling!=scaling\n"
"\n"
"	// pixelSize is simply 2.0/resolution / widthScaling\n"
"	vec2 scaling;\n"
"	vec2 translation;\n"
"	if(space_type==0) {\n"
"		// classical case\n"
"		scaling = resRatio * zoom;\n"
"		translation = resRatio * zoom * (localPos + translate);\n"
"		pixelSize = 2.0 / (minRes * zoom);\n"
"	}\n"
"	else if(space_type==1) {\n"
"		scaling = resRatio;      // same as 0 but no zoom\n"
"		translation = resRatio * (localPos + zoom * translate); // same as 0\n"
"		pixelSize = 2.0 / minRes;\n"
"	}\n"
"	else /*if(space_type==2)*/{\n"
"		scaling = 2.0 / resolution;\n"
"		translation = localPos * scaling - 1.0;\n"
"		pixelSize = 1.0;\n"
"	}\n"
"\n"
"	float w = width + pixelSize;\n"
"\n"
"	vec2 p0=gl_in[0].gl_Position.xy * localScale;\n"
"	vec2 p1=gl_in[1].gl_Position.xy * localScale;\n"
"	vec2 p2=gl_in[2].gl_Position.xy * localScale;\n"
"	vec2 p3=gl_in[3].gl_Position.xy * localScale;\n"
"\n"
"	vec2 ba = p2 - p1;\n"
"	lba = length(ba);\n"
"	vec2 v1 = ba / lba;\n"
"	vec2 v0, v2;\n"
"	float endWidth0, endWidth2;\n"
"	if(p0==p1) {\n"
"		v0 = v1;\n"
"		endWidth0 = w;\n"
"	}\n"
"	else {\n"
"		v0 = normalize(p1 - p0);\n"
"		endWidth0 = 0.0;\n"
"	}\n"
"\n"
"	if(p2==p3) {\n"
"		v2 = v1;\n"
"		endWidth2 = w;\n"
"	}\n"
"	else {\n"
"		v2 = normalize(p3 - p2);\n"
"		endWidth2 = 0.0;\n"
"	}\n"
"\n"
"	// determine the normal of each of the 3 segments (previous, current, next)\n"
"	vec2 n0 = perpendicular(v0);\n"
"	vec2 n1 = perpendicular(v1);\n"
"	vec2 n2 = perpendicular(v2);\n"
"\n"
"	// determine miter lines by averaging the normals of the 2 segments\n"
"	vec2 miter0 = normalize(n0 + n1);    // miter at start of current segment\n"
"	vec2 miter2 = normalize(n1 + n2);    // miter at end of current segment\n"
"\n"
"	// determine the length of the miter by projecting it onto normal and then inverse it\n"
"	float miter0_size = w  /  dot(miter0, n1);\n"
"	float miter2_size = w  /  dot(miter2, n1);\n"
"\n"
"	float miter0v = miter0_size * dot(miter0, v1);\n"
"	float miter2v = miter2_size * dot(miter2, v1);\n"
"\n"
"	vec2 p1_screen = scaling * p1 + translation;\n"
"	vec2 p2_screen = scaling * p2 + translation;\n"
"	vec2 miter0_screen = miter0_size * scaling * miter0;\n"
"	vec2 miter2_screen = miter2_size * scaling * miter2;\n"
"\n"
"	vec2 q0 = p1_screen + miter0_screen - endWidth0 * scaling * v1;\n"
"	vec2 q1 = p1_screen - miter0_screen - endWidth0 * scaling * v1;\n"
"	vec2 q2 = p2_screen + miter2_screen + endWidth2 * scaling * v1;\n"
"	vec2 q3 = p2_screen - miter2_screen + endWidth2 * scaling * v1;\n"
"\n"
"	vec2 miter2_perpend = perpendicular(miter2_screen);\n"
"\n"
"	// orientation of triangle q0-q2-q3\n"
"	float ori = dot(q0 - q3, miter2_perpend);\n"
"\n"
"	// the intersection of (q0, q1) and (q2, q3):   coordinates are given by q0 + inter * (q1-q0)\n"
"	float inter = 0.5 * ori / dot(miter0_screen, miter2_perpend);\n"
"\n"
"\n"
"	gl_Position.zw = vec2(0.0, 1.0);\n"
"\n"
"	// avoid crossing lines\n"
"	if(inter>0 && inter<1) {\n"
"		pRect = (1.0 - 2.0 * inter) * vec2(miter0v - endWidth0, w);\n"
"		gl_Position.xy = inter * (q1-q0)+q0;\n"
"		EmitVertex();\n"
"\n"
"		if(ori<0) {\n"
"			// the upper part is inverted\n"
"			pRect = vec2(-miter0v - endWidth0, -w);\n"
"			gl_Position.xy = q1;\n"
"			EmitVertex();\n"
"\n"
"			pRect = vec2(lba - miter2v + endWidth2, -w);\n"
"			gl_Position.xy = q3;\n"
"			EmitVertex();\n"
"		}\n"
"		else {\n"
"			// the lower part is inverted\n"
"			pRect = vec2(lba + miter2v + endWidth2, w);\n"
"			gl_Position.xy = q2;\n"
"			EmitVertex();\n"
"\n"
"			pRect = vec2(miter0v - endWidth0, w);\n"
"			gl_Position.xy = q0;\n"
"			EmitVertex();\n"
"		}\n"
"	}\n"
"	else {\n"
"		pRect = vec2(miter0v - endWidth0, w);\n"
"		gl_Position.xy = q0;\n"
"		EmitVertex();\n"
"\n"
"		pRect = vec2(-miter0v - endWidth0, -w);\n"
"		gl_Position.xy = q1;\n"
"		EmitVertex();\n"
"\n"
"		pRect = vec2(lba + miter2v + endWidth2, w);\n"
"		gl_Position.xy = q2;\n"
"		EmitVertex();\n"
"\n"
"		pRect = vec2(lba - miter2v + endWidth2, -w);\n"
"		gl_Position.xy = q3;\n"
"		EmitVertex();\n"
"	}\n"
"\n"
"	EndPrimitive();\n"
"}\n"
};
